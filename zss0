#!/bin/bash

#------------------------------------------------------------------------------
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.4.0
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    SECRET	Where to keep secrets.
#    CONFIG	Where to keep configurations.
#    STORE	Where to keep persistent data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Scnario:
#
#    1. First, use "<scirptname> env" to confirm the state is clean.
#    2. Then, use "<scriptname> config" to know how many configurations you have to set.
#    3. Then, use "<scriptname> secret-create" to create secret files.
#    4. Then, use "<scriptname> env" again to confirm the state is what you want.

#------------------------------------------------------------------------------
# Environments:

VERSION=0.4.1
SCRIPTNAME=node-adm
APPNAME=node-adm
SECRET=${SECRET:-"${PWD}/.secret/${SCRIPTNAME}"}
CONFIG=${CONFIG:-"${PWD}/.config/${SCRIPTNAME}"}

DEFAULT_STORE=${STORE:-"${PWD}/.store/${SCRIPTNAME}"}
DEFAULT_BASE_CONFIG=nop
DEFAULT_BASE_SECRET=nop
DEFAULT_BASE_DATA=nop
DEFAULT_NODES="u1 u2 u3"
DEFAULT_NODECTL="ssh -p \${SECURE_PORT}"
DEFAULT_NODECTL_TTY="ssh -t"
DEFAULT_HOSTFILE="/etc/hosts"
DEFAULT_NETPLAN=""
DEFAULT_SECURE_PORT="2201"
DEFAULT_DNS1="8.8.8.8"
DEFAULT_DNS2="8.8.4.4"
DEFAULT_NTP="91.189.89.199"
DEFAULT_SMTP="localhost"
DEFAULT_OPERATOR="$(whoami)"
DEFAULT_MAILTO="$(whoami)@localhost"
DEFAULT_GPGKEYNAME="$(whoami)"

GRUBUSER_FILE=${SECRET}/grubuser
GRUBPASS_FILE=${SECRET}/grubpass
SALT=${SECRET}/salt

STORE=`cat ${CONFIG}/store 2>/dev/null`
BASE_CONFIG=`cat ${CONFIG}/base_config 2>/dev/null`
BASE_SECRET=`cat ${CONFIG}/base_secret 2>/dev/null`
BASE_DATA=`cat ${CONFIG}/base_data 2>/dev/null`
NODES=`cat ${CONFIG}/nodes 2>/dev/null`
NODECTL=`cat ${CONFIG}/nodectl 2>/dev/null`
NODECTL_TTY=`cat ${CONFIG}/nodectl_tty 2>/dev/null`
HOSTFILE=`cat ${CONFIG}/hostfile 2>/dev/null`
NETPLAN=`cat ${CONFIG}/netplan 2>/dev/null`
SECURE_PORT=`cat ${CONFIG}/secure_port 2>/dev/null`
DNS1=`cat ${CONFIG}/dns1 2>/dev/null`
DNS2=`cat ${CONFIG}/dns2 2>/dev/null`
NTP=`cat ${CONFIG}/ntp 2>/dev/null`
SMTP=`cat ${CONFIG}/smtp 2>/dev/null`
OPERATOR=`cat ${CONFIG}/operator 2>/dev/null`
MAILTO=`cat ${CONFIG}/mailto 2>/dev/null`
GPGKEYNAME=`cat ${CONFIG}/gpgkeyname 2>/dev/null`

#------------------------------------------------------------------------------
# Commands

case $1 in
	"version")
		echo ${VERSION}
		;;
	"env")
		echo =========================================================================
		echo "## SCRIPT NAME: ${SCRIPTNAME}"
		echo - VERSION: ${VERSION}
		echo - STORE: ${STORE}
		echo - SECRET: $SECRET $(echo $(cat $SALT 2>/dev/null) $(cat ${SECRET}/* | sha256sum 2>/dev/null) | sha1sum | cut -c1-8)
		echo - CONFIG: ${CONFIG}
		echo - NODES: ${NODES}
		echo - NODECTL: ${NODECTL}
		echo - NODECTL_TTY: ${NODECTL_TTY}
		echo - HOSTFILE: ${HOSTFILE}
		echo - NETPLAN: ${NETPLAN}
		echo - SECURE_PORT: ${SECURE_PORT}
		echo - DNS1: ${DNS1}
		echo - DNS2: ${DNS2}
		echo - NTP: ${NTP}
		echo - SMTP: ${SMTP}
		echo - OPERATOR: ${OPERATOR}
		echo - MAILTO: ${MAILTO}
		echo - GPGKEYNAME: ${GPGKEYNAME} $(gpg -k ${GPGKEYNAME} 2>/dev/null | sed -n '2p' | xargs)
		echo - SALT: $(cat ${SALT} ${SALT} 2>/dev/null | sha1sum | cut -c1-8)
		echo "## REQUIREMENT:"
		echo - grub-mkpasswd-pbkdf2: $(which grub-mkpasswd-pbkdf2)
		echo - ssh: $(which ssh)
		echo - gpg: $(which gpg)
		echo - tar: $(which tar)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			"store")
				shift
				STORE=${1:-${DEFAULT_STORE}}
				echo ${STORE} > ${CONFIG}/store
				;;
			"nodes")
				shift
				NODES=${1:-${DEFAULT_NODES}}
				echo ${NODES} > ${CONFIG}/nodes
				;;
			"nodectl")
				shift
				NODECTL=${1:-${DEFAULT_NODECTL}}
				echo ${NODECTL} > ${CONFIG}/nodectl
				;;
			"nodectl_tty")
				shift
				NODECTL_TTY=${1:-${DEFAULT_NODECTL_TTY}}
				echo ${NODECTL_TTY} > ${CONFIG}/nodectl_tty
				;;
			"hostfile")
				shift
				HOSTFILE=${1:-${DEFAULT_HOSTFILE}}
				echo ${HOSTFILE} > ${CONFIG}/hostfile
				;;
			"netplan")
				shift
				NETPLAN=${1:-${DEFAULT_NETPLAN}}
				echo ${NETPLAN} > ${CONFIG}/netplan
				;;
			"secure_port")
				shift
				SECURE_PORT=${1:-${DEFAULT_SECURE_PORT}}
				echo ${SECURE_PORT} > ${CONFIG}/secure_port
				;;
			"dns1")
				shift
				DNS1=${1:-${DEFAULT_DNS1}}
				echo ${DNS1} > ${CONFIG}/dns1
				;;
			"dns2")
				shift
				DNS2=${1:-${DEFAULT_DNS2}}
				echo ${DNS2} > ${CONFIG}/dns2
				;;
			"ntp")
				shift
				NTP=${1:-${DEFAULT_NTP}}
				echo ${NTP} > ${CONFIG}/ntp
				;;
			"smtp")
				shift
				SMTP=${1:-${DEFAULT_SMTP}}
				echo ${SMTP} > ${CONFIG}/smtp
				;;
			"operator")
				shift
				OPERATOR=${1:-${DEFAULT_OPERATOR}}
				echo ${OPERATOR} > ${CONFIG}/operator
				;;
			"mailto")
				shift
				MAILTO=${1:-${DEFAULT_MAILTO}}
				echo ${MAILTO} > ${CONFIG}/mailto
				;;
			"gpg")
				shift
				GPGKEYNAME=${1:-${DEFAULT_GPGKEYNAME}}
				echo ${GPGKEYNAME} >  ${CONFIG}/gpgkeyname
				;;
			*)
				echo $(basename $0) config "<config_name>" "<config_value>"
				echo ""
				echo "config names:"
				echo "	store		The local repository for state."
				echo "			Ex: $(basename $0) config store '${DEFAULT_STORE}'"
				echo "	nodes		which nodes to apply."
				echo "			Ex: $(basename $0) config nodes '${DEFAULT_NODES}'"
				echo "	nodectl		the command to control the node."
				echo "			Ex: $(basename $0) config nodectl '${DEFAULT_NODECTL}'"
				echo " 	nodectl_tty	the command to control the node with tty allocatation."
				echo "			Ex: $(basename $0) config nodectl_tty '${DEFAULT_NODECTL_TTY}'"
				echo " 	hostfile	which hosts file is used for all nodes."
				echo "			Ex: $(basename $0) config hostfile '${DEFAULT_HOSTFILE}'"
				echo " 	netplan		customized netplan."
				echo "			Ex: $(basename $0) config netplan '${NETPLAN}'"
				echo " 	secure_port	re-configuring the SSH secure port for all nodes."
				echo "			Ex: $(basename $0) config secure_port '${DEFAULT_SECURE_PORT}'"
				echo " 	dns1		which DNS is used."
				echo "			Ex: $(basename $0) config dns1 '${DEFAULT_DNS1}'"
				echo " 	dns2		which DNS is used."
				echo "			Ex: $(basename $0) config dns2 '${DEFAULT_DNS2}'"
				echo " 	ntp		which NTP is used."
				echo "			Ex: $(basename $0) config ntp '${DEFAULT_NTP}'"
				echo " 	smtp		which SMTP is used."
				echo "			Ex: $(basename $0) config smtp '${DEFAULT_SMTP}'"
				echo " 	operator	the operator account of all nodes."
				echo "			Ex: $(basename $0) config operator '${DEFAULT_OPERATOR}'"
				echo " 	mailto		the mail address to recieve notifications."
				echo "			Ex: $(basename $0) config mailto '${DEFAULT_MAILTO}'"
				echo "	gpg		configure which gpg key to use."
				echo "			Ex: $(basename $0) config gpg '${DEFAULT_GPGKEYNAME}'"
				;;
		esac
		;;
	"secret-create")
		shift
		mkdir -p ${SECRET}
		chmod -R go-rwx ${SECRET}

		read -p "GRUBUSER:" GRUBUSER
		echo "$GRUBUSER" | gpg -ear ${GPGKEYNAME} -o ${GRUBUSER_FILE}

		grub-mkpasswd-pbkdf2
		read -p "GRUBPASS (copy from grub.pbkdf2.sha512...to the end, and paste here):" GRUBPASS
		echo "$GRUBPASS" | gpg -ear ${GPGKEYNAME} -o ${GRUBPASS_FILE}

		gpg --gen-random --armor 2 16 | base64 | cut -c1-16 > ${SALT}
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case ${ACTION} in
			"save")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_config
					$0 env > ${CONFIG}/env
					cd ${CONFIG}
					tar -zcf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz .
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_secret
					mv -f ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ${STORE}/state/${STATENAME}-bak-${APPNAME}-secret.tgz.enc &>/dev/null
					cd ${SECRET}
					tar -zc . | gpg -ear ${GPGKEYNAME} -o ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo "DATA state not support."
				fi
				;;
			"load")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz ]
					then
						cd ${CONFIG}
						tar -zxf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_config
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ]
					then
						cd ${SECRET}
						gpg -d ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc | tar xz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_secret
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo "DATA state not support."
				fi
				;;
			"list"|*)
				HC='\033[0;93m'
				NC='\033[0m'
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-config.tgz 2>/dev/null | sed "s/\(.*\)-${APPNAME}-config.tgz/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-secret.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-secret.tgz.enc/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## DATA  : ${BASE_DATA}${NC}"
					cd ${STORE}/data
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-data.tgz.enc/           \1/"
					cd - &>/dev/null
				fi

				echo -e "${HC}## ENV   : STATE                                              | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	"sshclean")
		shift
		NODES=${1:-${NODES}}

		for NODE in ${NODES}
		do
			NODEIP=$(grep "[\t ]*${NODE}$" /etc/hosts | cut -d' ' -f1)
			ssh-keygen -f ~/.ssh/known_hosts -R "${NODE}"
			ssh-keygen -f ~/.ssh/known_hosts -R "${NODEIP}"
		done
		;;
	"sshwait")
		shift
		NODES=${1:-${NODES}}

		for NODE in ${NODES}
		do
			while ! [[ $(nc -w 5 "${NODE}" 22 <<< "\0" ) =~ "OpenSSH" ]] && \
				! [[ $(nc -w 5 "${NODE}" ${SECURE_PORT} <<< "\0" ) =~ "OpenSSH" ]]
			do
				echo waiting ${NODE}...
				sleep 5
			done
			echo ${NODE} is ready.
		done
		;;
	"sshcopy")
		shift
		NODES=${1:-${NODES}}

		for NODE in ${NODES}
		do
			ssh-copy-id -i ~/.ssh/id_rsa.pub "${NODE}"
		done
		;;
	"operate")
		shift
		case $1 in
		"on")
			for NODE in ${NODES}
			do
				${NODECTL_TTY} ${NODE} \
					"echo ${OPERATOR} ALL=\(ALL\) NOPASSWD: ALL | sudo tee /etc/sudoers.d/${OPERATOR}"
			done
			;;
		"off")
			for NODE in ${NODES}
			do
				${NODECTL_TTY} ${NODE} \
					"sudo -n rm /etc/sudoers.d/${OPERATOR}"
			done
			;;
		esac
		;;
	"exec-for-all")
		shift
		$0 exec "${NODES}" $*
		;;
	"exec")
		shift
		NODES=$1
		shift
		COMMANDS=$*
		for NODE in ${NODES}
		do
			eval ${NODECTL} ${NODE} \"${COMMANDS}\"
		done
		;;
	"apply")
		shift
		NODES=${1:-${NODES}}

		GRUBUSER="$(gpg -d ${GRUBUSER_FILE})"
		GRUBPASS="$(gpg -d ${GRUBPASS_FILE})"

		shift
		for NODE in ${NODES}
		do
			echo =========================================================================
			echo NODE:${NODE} applying...
			./policy-hosts/apply "${NODECTL}" "${NODE}" "${HOSTFILE}"
			./install-update/install "${NODECTL}" "${NODE}"
			./install-docker/install "${NODECTL}" "${NODE}" "${OPERATOR}"
			./install-logwatch/install "${NODECTL}" "${NODE}" "${SMTP}"
			./install-kernel/install "${NODECTL}" "${NODE}"
			./install-post-packages/install "${NODECTL}" "${NODE}"
			./policy-sshd/apply "${NODECTL}" "${NODE}" "${SECURE_PORT}"
			./policy-ntp/apply "${NODECTL}" "${NODE}" "${NTP}"
			./policy-root-no-login/apply "${NODECTL}" "${NODE}"
			./policy-root-mail-alias/apply "${NODECTL}" "${NODE}" "${OPERATOR}" "${MAILTO}"
			./policy-lock-cronjobs/apply "${NODECTL}" "${NODE}"
			./policy-grub-security/apply "${NODECTL}" "${NODE}" "${GRUBUSER}" "${GRUBPASS}"
			./policy-logrorate/apply "${NODECTL}" "${NODE}"
			./policy-docker-log-rotate/apply "${NODECTL}" "${NODE}"
			./policy-update-notification/apply "${NODECTL}" "${NODE}"
			./policy-disable-ipv6/apply "${NODECTL}" "${NODE}"
			./policy-iptables/apply "${NODECTL}" "${NODE}" "${SECURE_PORT}"
			./extra-netplan/apply "${NODECTL}" "${NODE}" "${NETPLAN}"
		done
		;;
	"check")
		shift
		NODES=${1:-${NODES}}

		for NODE in ${NODES}
		do
			echo =========================================================================
			echo NODE:${NODE} checking...
			./policy-hosts/check "${NODECTL}" "${NODE}" "${HOSTFILE}"
			./policy-sshd/check "${NODECTL}" "${NODE}" "${SECURE_PORT}"
			./policy-ntp/check "${NODECTL}" "${NODE}" "${NTP}"
			./policy-root-no-login/check "${NODECTL}" "${NODE}"
			./policy-root-mail-alias/check "${NODECTL}" "${NODE}" "${OPERATOR}" "${MAILTO}"
			./policy-lock-cronjobs/check "${NODECTL}" "${NODE}"
			./policy-grub-security/check "${NODECTL}" "${NODE}"
			./policy-logrorate/check "${NODECTL}" "${NODE}"
			./policy-docker-log-rotate/check "${NODECTL}" "${NODE}"
			./policy-update-notification/check "${NODECTL}" "${NODE}"
			./policy-disable-ipv6/check "${NODECTL}" "${NODE}"
			./policy-iptables/check "${NODECTL}" "${NODE}"
			./check-security/check "${NODECTL}" "${NODE}"
			./check-port-inspect/check "${NODECTL}" "${NODE}"
			./check-hardware/check "${NODECTL}" "${NODE}"
		done
		;;
	"reboot")
		shift
		NODES=${1:-${NODES}}

		for NODE in ${NODES}
		do
			echo =========================================================================
			echo NODE:${NODE} rebooting...
			${NODECTL} ${NODE} "sudo shutdown -r now"
		done
		;;
	"policy")
		shift
		ACTION=$1 ; shift
		POLICY=$1 ; shift
		NODES=${1:-${NODES}} ; shift
		COMMANDS=$*
		for NODE in ${NODES}
		do
			echo =========================================================================
			echo NODE:${NODE} ${ACTION}...
			./${POLICY}/${ACTION} "${NODECTL}" "${NODE}" ${COMMANDS}
		done
		;;
	*)
		echo $(basename $0) version
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		echo $(basename $0) "[sshclean/sshwait/sshcopy] [nodes]"
		echo $(basename $0) "operate [on/off]"
		echo $(basename $0) "exec-for-all [commands]"
		echo $(basename $0) "exec [nodes] [commands]"
		echo $(basename $0) "[apply/check/reboot] [node]"
		echo $(basename $0) "policy [install/apply/check] [policy] [node] [commands]"
		;;
esac

